import feedparser
import time
import logging
import re
import datetime
import requests
import telebot
import os
import threading
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
RSS_URLS = os.getenv('RSS_URLS', '').split(',')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    POST_DELAY = int(os.getenv('POST_DELAY', '10'))
    CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '300'))
    MAX_HISTORY = int(os.getenv('MAX_HISTORY', '100'))
except ValueError:
    POST_DELAY = 10
    CHECK_INTERVAL = 300
    MAX_HISTORY = 100

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or not CHANNEL_ID or not RSS_URLS or not ADMIN_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("news_bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
is_running = False
bot_thread = None
sent_news = set()
stats = {
    'start_time': None,
    'posts_sent': 0,
    'last_check': None,
    'errors': 0
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def load_history():
    global sent_news
    try:
        if os.path.exists("sent_news.txt"):
            with open("sent_news.txt", "r") as f:
                sent_news = set(f.read().splitlines())
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_news)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
def save_history():
    try:
        with open("sent_news.txt", "w") as f:
            f.write("\n".join(sent_news))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        return False

def send_admin_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        bot.send_message(ADMIN_ID, message, parse_mode="HTML")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: {message}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")
        return False

def clean_html(raw_html):
    """–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    clean = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')
    return re.sub(clean, '', raw_html)

def is_image_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    if not url:
        return False
        
    image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
    return any(url.lower().endswith(ext) for ext in image_extensions)

def get_news():
    """–ü–∞—Ä—Å–∏–Ω–≥ RSS-–ª–µ–Ω—Ç –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    all_news = []
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(RSS_URLS)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    stats['last_check'] = datetime.datetime.now()
    
    for url in RSS_URLS:
        if not url.strip():
            continue
            
        try:
            feed = feedparser.parse(url.strip())
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(feed.entries)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {url}")
            
            for entry in feed.entries:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if not hasattr(entry, 'published_parsed'):
                    continue
                    
                # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏)
                try:
                    entry_time = datetime.datetime(*entry.published_parsed[:6])
                    if (datetime.datetime.now() - entry_time).days > 1:
                        continue
                except Exception as time_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(time_error)}")
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                title = clean_html(entry.title) if hasattr(entry, 'title') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                link = entry.link if hasattr(entry, 'link') else ""
                summary = clean_html(entry.description)[:200] + "..." if hasattr(entry, 'description') else ""
                
                news_item = {
                    "title": title,
                    "link": link,
                    "summary": summary,
                    "image": None,
                    "source": url
                }
                
                # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if hasattr(entry, 'media_content'):
                    for media in entry.media_content:
                        if media.get('type', '').startswith('image'):
                            news_item["image"] = media['url']
                            break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ media_content, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ enclosure
                if not news_item["image"] and hasattr(entry, 'enclosures'):
                    for enclosure in entry.enclosures:
                        if enclosure.get('type', '').startswith('image'):
                            news_item["image"] = enclosure['href']
                            break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if news_item["image"] and not is_image_url(news_item["image"]):
                    news_item["image"] = None
                
                all_news.append(news_item)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {str(e)}"
            logger.error(error_msg)
            stats['errors'] += 1
            send_admin_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RSS: {url}\n{str(e)[:200]}...")
    
    return all_news

def send_news(news_item):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        title = news_item['title'][:200] + "..." if len(news_item['title']) > 200 else news_item['title']
        summary = news_item['summary'][:300] if news_item['summary'] else ""
        
        message = f"<b>{title}</b>\n\n{summary}\n\nüîó {news_item['link']}"
        
        if news_item["image"]:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                response = requests.head(news_item["image"], timeout=5)
                if response.status_code == 200:
                    bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=news_item["image"],
                        caption=message
                    )
                    stats['posts_sent'] += 1
                    return True
            except Exception as img_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(img_error)}")
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        bot.send_message(
            chat_id=CHANNEL_ID,
            text=message,
            disable_web_page_preview=False
        )
        stats['posts_sent'] += 1
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        stats['errors'] += 1
        send_admin_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏:\n{news_item['title'][:50]}...\n–û—à–∏–±–∫–∞: {str(e)[:200]}")
        return False

def generate_status_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞"""
    if not stats['start_time']:
        return "‚ùì –ë–æ—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    uptime = datetime.datetime.now() - stats['start_time']
    hours, remainder = divmod(uptime.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    last_check = stats['last_check'].strftime("%H:%M:%S") if stats['last_check'] else "–Ω–∏–∫–æ–≥–¥–∞"
    
    report = (
        f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º\n"
        f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {stats['posts_sent']}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {stats['errors']}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(RSS_URLS)}\n"
        f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'—Ä–∞–±–æ—Ç–∞–µ—Ç ‚ñ∂Ô∏è' if is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë'}"
    )
    return report

def generate_stats_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    if not stats['start_time']:
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    
    uptime = datetime.datetime.now() - stats['start_time']
    hours = uptime.total_seconds() / 3600
    posts_per_hour = stats['posts_sent'] / hours if hours > 0 else 0
    
    report = (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}\n"
        f"üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {stats['posts_sent']}\n"
        f"üìÆ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {posts_per_hour:.1f} –Ω–æ–≤–æ—Å—Ç–µ–π/—á–∞—Å\n"
        f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['errors']}\n"
        f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(RSS_URLS)}\n"
        f"üÜî –ö–∞–Ω–∞–ª: {CHANNEL_ID}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_check'].strftime('%Y-%m-%d %H:%M') if stats['last_check'] else 'N/A'}"
    )
    return report

def generate_combined_report():
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç: —Å—Ç–∞—Ç—É—Å + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    status = generate_status_report()
    stats_report = generate_stats_report()
    return f"{status}\n\n{stats_report}"

def list_sources():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    sources = "\n".join([f"‚Ä¢ {i+1}. {url}" for i, url in enumerate(RSS_URLS)])
    return f"üìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b> ({len(RSS_URLS)}):\n{sources}"

def bot_worker():
    """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞"""
    global sent_news
    
    logger.info("=== –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω ===")
    send_admin_message("üöÄ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    load_history()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while is_running:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news = get_news()
            new_count = sum(1 for item in news if item["link"] and item["link"] not in sent_news)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π, –Ω–æ–≤—ã—Ö: {new_count}")
            
            if new_count:
                send_admin_message(f"üîç –ù–∞–π–¥–µ–Ω–æ {new_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(news)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            sent_in_cycle = 0
            for item in news:
                if not is_running:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    break
                    
                if item["link"] and item["link"] not in sent_news:
                    if send_news(item):
                        sent_news.add(item["link"])
                        sent_in_cycle += 1
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {item['title'][:30]}...")
                        time.sleep(POST_DELAY)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            if sent_in_cycle:
                send_admin_message(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_in_cycle} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if len(sent_news) > MAX_HISTORY:
                sent_news = set(list(sent_news)[-MAX_HISTORY//2:])
                
            save_history()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL//60} –º–∏–Ω—É—Ç...")
            wait_time = CHECK_INTERVAL
            while wait_time > 0 and is_running:
                time.sleep(1)
                wait_time -= 1
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}"
            logger.critical(error_msg)
            stats['errors'] += 1
            send_admin_message(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:\n{str(e)[:300]}")
            time.sleep(60)
    
    logger.info("–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    send_admin_message("üõë –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global is_running, bot_thread, stats
    
    if is_running:
        return "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! ‚úÖ"
    
    is_running = True
    stats['start_time'] = datetime.datetime.now()
    stats['last_check'] = None
    stats['posts_sent'] = 0
    stats['errors'] = 0
    
    bot_thread = threading.Thread(target=bot_worker)
    bot_thread.daemon = True
    bot_thread.start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    return "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! üöÄ"

def pause_bot():
    """–ü–∞—É–∑–∞ –±–æ—Ç–∞"""
    global is_running
    
    if not is_running:
        return "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚è∏Ô∏è"
    
    is_running = False
    logger.info("–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return "–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. ‚è∏Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

def stop_bot():
    """–ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global is_running
    
    if not is_running:
        return "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üõë"
    
    is_running = False
    save_history()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return "–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üõë"

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    stop_bot()
    time.sleep(2)
    return start_bot()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if is_running:
        markup.add(
            KeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
            KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
        )
    else:
        markup.add(
            KeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"),
            KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    markup.add(
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏"),
    )
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –ø–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    markup.add(
        KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
        KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    )
    
    return markup

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
bot.set_my_commands([
    BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand("help", "–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
    BotCommand("status", "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"),
    BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"),
    BotCommand("start_bot", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"),
    BotCommand("pause", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
    BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
    BotCommand("sources", "–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
])

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
INFO_MESSAGE = """
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram-–∫–∞–Ω–∞–ª</b>

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç –≤ –≤–∞—à –∫–∞–Ω–∞–ª. 
–ü—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö 
–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ RSS-–ª–µ–Ω—Ç
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pyTelegramBotAPI
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö RSS-—Ñ–æ—Ä–º–∞—Ç–æ–≤
‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 24/7

<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b>
–í–∞—à–µ –∏–º—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
@–≤–∞—à_username
email@example.com

<b>–í–µ—Ä—Å–∏—è:</b> 2.0 (–ò—é–Ω—å 2025)
"""

# –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
BOT_DESCRIPTION = """
ü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram-–∫–∞–Ω–∞–ª</b>

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç –≤ –≤–∞—à –∫–∞–Ω–∞–ª. 
–ü—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö 
–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
COMMANDS_LIST = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/start_bot - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π
/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é
/stop - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/sources - –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º üëá</b>
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
WELCOME_MESSAGE = f"""
{BOT_DESCRIPTION}

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
        return
        
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")
    bot.reply_to(message, 
        f"{BOT_DESCRIPTION}\n\n{COMMANDS_LIST}",
        parse_mode="HTML",
        reply_markup=create_reply_keyboard()
    )

@bot.message_handler(commands=['status'])
def send_status(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    bot.reply_to(message, generate_status_report(), 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['stats'])
def send_stats(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    bot.reply_to(message, generate_combined_report(), 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['start_bot'])
def start_command(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start_bot –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    result = start_bot()
    bot.reply_to(message, result, 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['pause'])
def pause_command(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pause –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    result = pause_bot()
    bot.reply_to(message, result, 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['stop'])
def stop_command(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stop –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    result = stop_bot()
    bot.reply_to(message, result, 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['restart'])
def restart_command(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /restart –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    result = restart_bot()
    bot.reply_to(message, result, 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

@bot.message_handler(commands=['sources'])
def sources_command(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /sources –æ—Ç {message.from_user.id}")
    if str(message.from_user.id) != ADMIN_ID:
        return
        
    bot.reply_to(message, list_sources(), 
                parse_mode="HTML",
                reply_markup=create_reply_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç {user_id}")
    
    if str(user_id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=create_reply_keyboard())
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å":
        start_command(message)
    elif text == "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        pause_command(message)
    elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        stop_command(message)
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        restart_command(message)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        report = generate_combined_report()
        bot.reply_to(message, report, 
                    parse_mode="HTML",
                    reply_markup=create_reply_keyboard())
    elif text == "üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏":
        sources_command(message)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        send_welcome(message)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        bot.reply_to(message, INFO_MESSAGE, 
                    parse_mode="HTML",
                    reply_markup=create_reply_keyboard())
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                    reply_markup=create_reply_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É—Å—Ç—ã—Ö —á–∞—Ç–æ–≤
@bot.message_handler(content_types=['text'], func=lambda message: message.text not in ['/start', '/help'])
def handle_empty_chat(message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    if message.text and message.text.startswith('/') is False:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞")
        bot.reply_to(message, WELCOME_MESSAGE, 
                    parse_mode="HTML",
                    reply_markup=create_reply_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    load_history()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    send_admin_message("ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {str(e)}")
        send_admin_message(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)[:300]}")
